#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dg:server');
var http = require('http');
var socketIO = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketIO(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


var players = {};

function  PlayerPrototype() {
    this.x=300;
    this.y= 300;
    this.movement = false;
    this.nextx=0;
    this.nexty=0;
    this.currentAttack = null;
    this.currentDef = null;
    this.makemove = function () {
        var stopx = false;
        var stopy = false;
        var _this = this;
        if (this.x > this.nextx) {
            this.x -= 1;
        }
        else if (this.x < this.nextx) {
            this.x += 1;
        } else {
            stopx = true;
        }

        if (this.y > this.nexty) {
            this.y -= 1;
        } else if (this.y < this.nexty) {
            this.y += 1;
        } else {
            stopy = true;
        }
        // console.log(this.x, this.y);
        if (stopy && stopx) {
            console.log("move end");
        } else {
            setTimeout(function () {
                // console.log('fire');
                _this.makemove();
            }, 1000/36);
        }
    }
    this.setAction = function (data) {
        switch(data.type){
            case 'a1':
                this.currentAttack= 'Maroon';
                break;
            case 'a2':
                this.currentAttack= 'Teal';
                break;
            case 'a3':
                this.currentAttack= 'Olive';
                break;
            case 'd1':
                this.currentDef= 'Navy';
                break;
            case 'd2':
                this.currentDef= 'Purple';
                break;
            case 'd3':
                this.currentDef= 'Orange';
                break;
            default:
                break;
        }

    }
}
io.on('connection', function(socket) {
    socket.on('new player', function() {
        players[socket.id] = new PlayerPrototype();
    });
    socket.on('movement', function(data) {
        var player = players[socket.id] || new PlayerPrototype();
        if (data.left) {
            player.x -= 5;
        }
        if (data.up) {
            player.y -= 5;
        }
        if (data.right) {
            player.x += 5;
        }
        if (data.down) {
            player.y += 5;
        }
    });
    socket.on('moveclick', function(data) {
        var player = players[socket.id] || new PlayerPrototype();
        player.nextx =data.x;
        player.nexty = data.y;
        console.log('detect click');
        player.makemove();
    });
    socket.on('battleAction', function (data) {
        console.log(data);
        socket.emit('actionConfirm', {id: socket.id});
    });
    socket.on('disconnect', function () {
        delete players[socket.id];
        console.log('clent disconnected. remove him from state');
        console.log(players);
    });
});
setInterval(function() {
    io.sockets.emit('state', players);
}, 1000 / 60);
